{"name": "Bytes to MP3", "description": "Save bytes input as an MP3 file.", "icon": null, "icon_bg_color": null, "gradient": null, "data": {"edges": [], "nodes": [{"data": {"id": "BytesToMP3-IwpBZ", "node": {"base_classes": ["Message"], "beta": false, "conditional_paths": [], "custom_fields": {}, "description": "Save bytes input as an MP3 file.", "display_name": "Bytes to MP3", "documentation": "", "edited": true, "field_order": ["data", "file_path"], "frozen": false, "icon": "music", "legacy": false, "lf_version": "1.2.0", "metadata": {}, "minimized": false, "output_types": [], "outputs": [{"allows_loop": false, "cache": true, "display_name": "Confirmation", "hidden": false, "method": "save_mp3", "name": "confirmation", "options": null, "required_inputs": null, "selected": "Message", "tool_mode": true, "types": ["Message"], "value": "__UNDEFINED__"}], "pinned": false, "template": {"_type": "Component", "code": {"advanced": true, "dynamic": true, "fileTypes": [], "file_path": "", "info": "", "list": false, "load_from_db": false, "multiline": true, "name": "code", "password": false, "placeholder": "", "required": true, "show": true, "title_case": false, "type": "code", "value": "from pathlib import Path\nfrom langflow.custom import Component\nfrom langflow.io import DataInput, Output, StrInput\nfrom langflow.schema import Data, Message\n\nclass BytesToMP3Component(Component):\n    display_name = \"Bytes to MP3\"\n    description = \"Save bytes input as an MP3 file.\"\n    icon = \"music\"\n    name = \"BytesToMP3\"\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Bytes Data\",\n            info=\"The bytes to save as an MP3 file.\",\n            dynamic=True,\n            show=True,\n            tool_mode=True\n        ),\n        StrInput(\n            name=\"file_path\",\n            display_name=\"File Path (including filename)\",\n            info=\"The full file path (including filename and extension).\",\n            value=\"./output.mp3\",\n            tool_mode=True\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"confirmation\",\n            display_name=\"Confirmation\",\n            method=\"save_mp3\",\n            info=\"Confirmation message after saving the MP3 file.\",\n        ),\n    ]\n\n    # def save_mp3(self) -> Message:\n    #     file_path = Path(self.file_path).expanduser()\n    #     if not str(file_path).lower().endswith(\".mp3\"):\n    #         file_path = file_path.with_suffix(\".mp3\")\n    #     # Ensure the directory exists\n    #     if not file_path.parent.exists():\n    #         file_path.parent.mkdir(parents=True, exist_ok=True)\n    #     bytes_data = self.data\n        \n    #     # If bytes_data is a Data object, extract the bytes\n    #     if hasattr(bytes_data, \"data\"):\n    #         bytes_data = bytes_data.data\n    #     if not isinstance(bytes_data, (bytes, bytearray, str, dict, Data)):\n    #         raise ValueError(f\"Input data is not bytes. {bytes_data}\")\n    #     with open(file_path, \"wb\") as f:\n    #         f.write(bytes_data)\n    #     return Message(text=f\"Audio saved as '{file_path}'\")\n        \n    def save_mp3(self) -> Message:\n        file_path = Path(self.file_path).expanduser()\n        if not str(file_path).lower().endswith(\".mp3\"):\n            file_path = file_path.with_suffix(\".mp3\")\n        # Ensure the directory exists\n        if not file_path.parent.exists():\n            file_path.parent.mkdir(parents=True, exist_ok=True)\n        bytes_data = self.data\n    \n        # If bytes_data is a Data object, extract the bytes\n        if hasattr(bytes_data, \"data\"):\n            bytes_data = bytes_data.data\n        # If bytes_data is a dict, extract the value (assume key is 'audio_bytes')\n        if isinstance(bytes_data, dict):\n            bytes_data = bytes_data.get(\"audio_bytes\")\n        if not isinstance(bytes_data, (bytes, bytearray)):\n            raise ValueError(f\"Input data is not bytes. {type(bytes_data)}\")\n        with open(file_path, \"wb\") as f:\n            f.write(bytes_data)\n        return Message(text=f\"Audio saved as '{file_path}'\")\n\n"}, "data": {"_input_type": "DataInput", "advanced": false, "display_name": "Bytes Data", "dynamic": true, "info": "The bytes to save as an MP3 file.", "input_types": ["Data"], "list": false, "list_add_label": "Add More", "name": "data", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_input": true, "trace_as_metadata": true, "type": "other", "value": ""}, "file_path": {"_input_type": "StrInput", "advanced": false, "display_name": "File Path (including filename)", "dynamic": false, "info": "The full file path (including filename and extension).", "list": false, "list_add_label": "Add More", "load_from_db": false, "name": "file_path", "placeholder": "", "required": false, "show": true, "title_case": false, "tool_mode": true, "trace_as_metadata": true, "type": "str", "value": "/Users/NixonKurian/Documents/Personal/Agentic AI Book/Code/Langflow/output.mp3"}}, "tool_mode": false, "official": false}, "showNode": true, "type": "BytesToMP3"}, "id": "BytesToMP3-IwpBZ", "position": {"x": 0, "y": 0}, "type": "genericNode"}], "viewport": {"x": 1, "y": 1, "zoom": 1}}, "is_component": true, "updated_at": "2025-07-09T03:45:28+00:00", "webhook": false, "endpoint_name": null, "tags": [], "locked": false, "mcp_enabled": true, "action_name": null, "action_description": null, "access_type": "PRIVATE", "id": "82e5b24d-e1c4-4bb6-bddd-bb7eda704514", "user_id": "d3b17470-7f13-408d-8f6d-480dd129e505", "folder_id": "794e79f7-0345-4cf6-a15a-268b952c0beb"}